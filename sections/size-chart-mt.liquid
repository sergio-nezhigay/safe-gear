<style>
  .table-container {
    width: 100%;
    margin: auto;
    border-radius: 5px;
    overflow: hidden;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }
  thead {
    background-color: #cbe3ff;
    color: #000;
    text-align: left;
  }
  th,
  td {
    padding: 12px;
    border: 1px solid #ddd;
  }
  td a {
    text-decoration: none;
    color: #000;
  }
  td .product_title_ {
    color: #4b81bf;
    text-decoration: none;
    font-size: 16px;
    line-height: 20px;
  }

  .price {
    color: #3cc561;
  }
  .info-btn {
    color: white;
    padding: 10px 15px;
    text-align: center;
    display: inline-block;
    text-decoration: none;
    font-weight: bold;
    border: none;
    cursor: pointer;
  }
  .custom-size_chart {
    padding-top: 33px;
  }
  .table-container table tr td:first-child {
    padding-left: 5px;
  }
  .custom-product-container .table-container table tr th {
    font-size: 16px;
    font-weight: 300;
    padding-top: 10px;
    padding-bottom: 10px;
  }
  @media (max-width: 768px) {
    .custom-product-container .table-container {
      width: 100%;
      overflow-x: auto;
      position: relative;
    }

    .custom-product-container table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      min-width: 600px;
    }

    .custom-product-container table th:first-child,
    .custom-product-container table td:first-child {
      position: sticky;
      left: 0;
      {% comment %}z-index: 10;{% endcomment %}
      border-right: 2px solid #ddd;
      min-width: 120px;
      max-width: 120px;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }

    .custom-product-container table td:first-child {
      background-color: #fff;
    }

    .custom-product-container table th:first-child {
      background-color: #cbe3ff;
      font-size: 14px;
      font-weight: 300;
      text-align: left;
      padding: 12px 8px;
      height: 100%;
      vertical-align: top;
    }

    .custom-product-container table th,
    .custom-product-container table td {
      min-width: 100px;
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
      font-size: 14px;
    }

    .custom-product-container table th {
      font-size: 14px;
      font-weight: 300;
      text-align: center;
      background-color: #cbe3ff;
    }

    .custom-product-container table td:first-child a,
    .custom-product-container table th:first-child {
      display: block;
      word-break: break-word;
      line-height: 1.2;
    }
    .cust_model {
      height: 125px !important;
    }
  }
</style>
{% if product.metafields.custom.list_product != blank %}
  <div class="section-background color-{{ section.settings.color_scheme }}"></div>
  <div
    class="size-chart-section section section--page-width spacing-style color-{{ section.settings.color_scheme | default: 'scheme-1' }} relative"
    style="{% render 'spacing-style', settings: section.settings %}"
  >
    <div class="page-width">
      <div id="custom-product-{{ section.id }}" class="custom-size_chart">
        <h2 class="table-heading_ title title-wrapper--no-top-margin inline-richtext h1 scroll-trigger animate--slide-in">
          Størrelser
        </h2>
        <div class="custom-product-wrap">
          <div class="custom-product-container">
            <div class="table-container">
              <table>
                <thead>
                  <tr>
                    <th class="cust_model">Model</th>
                    <th class="cust_hkd">
                      Udvendige mål <br>
                      (HxBxD mm)
                    </th>
                    <th class="cust_hkd">
                      Indvendige mål <br>
                      (HxBxD mm)
                    </th>
                    <th class="cust_ve">Vægt</th>
                    <th class="cust_price">Pris</th>
                    <th class="cust_hkd"></th>
                  </tr>
                </thead>
                <tbody>
                  {% for product_ in product.metafields.custom.list_product.value %}
                    <tr>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product_title_ product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.title -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.metafields.custom.new_height.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_width.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_depth.value | split: ' ' | first -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.metafields.custom.new_height_interior.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_width_interior.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_depth_interior.value | split: ' ' | first -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {% for variant in product_.variants %}
                            {% if forloop.first %}
                              <span>{{ variant.weight | divided_by: 1000 }} kg</span>
                            {% endif %}
                          {% endfor %}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                          >From <span class="price">{{ product_.price | money_with_currency }}</span></a
                        >
                      </td>
                      <td class="cut_td">
                        <a
                          href="javascript:void(0);"
                          id="{{ product_.url }}"
                          pr_handle="{{ product_.handle }}"
                          class="info-btn"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="30"
                            height="30"
                            viewBox="0 0 30 30"
                            fill="none"
                          >
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M19.5163 20.5769C17.6058 22.2418 15.1081 23.25 12.375 23.25C6.3689 23.25 1.5 18.3811 1.5 12.375C1.5 6.3689 6.3689 1.5 12.375 1.5C18.3811 1.5 23.25 6.3689 23.25 12.375C23.25 15.1081 22.2418 17.6058 20.5769 19.5163L29.7803 28.7197L28.7197 29.7803L19.5163 20.5769ZM21.75 12.375C21.75 17.5527 17.5527 21.75 12.375 21.75C7.19733 21.75 3 17.5527 3 12.375C3 7.19733 7.19733 3 12.375 3C17.5527 3 21.75 7.19733 21.75 12.375Z" fill="#3CC561"/>
                          </svg>
                        </a>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

{% schema %}
{
  "name": "Size chart",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 48
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 48
    }
  ],
  "presets": [
    {
      "name": "Size chart"
    }
  ]
}
{% endschema %}

{% javascript %}
  // Immediate execution to test if JavaScript is working
  console.log('[ProductSwitcher] Script executing at:', new Date().toISOString());

  // Performance optimization: Cache for fetched pages
  const pageCache = new Map();
  const prefetchQueue = new Set();

  // Simple function to handle clicks
  function handleProductSwitchClick(event) {
    const target = event.target.closest('.product-switch-link');

    if (!target) {
      return;
    }

    console.log('[ProductSwitcher] Product link clicked:', target);
    event.preventDefault();

    const productUrl = target.dataset.productUrl;
    const productHandle = target.dataset.productHandle;

    if (!productUrl) {
      console.warn('[ProductSwitcher] No product URL found');
      return;
    }

    console.log('[ProductSwitcher] Switching to product:', productUrl);

    // Add loading state
    target.classList.add('loading');

    // Update URL
    window.history.pushState({}, '', productUrl);

    // Use optimized manual update with caching
    console.log('[ProductSwitcher] Using optimized manual section update');
    updateWithOptimizedApproach(productUrl, target);
  }

  // Prefetch product pages on hover for instant loading
  function handleProductHover(event) {
    const target = event.target.closest('.product-switch-link');
    if (!target) return;

    const productUrl = target.dataset.productUrl;
    if (!productUrl || pageCache.has(productUrl) || prefetchQueue.has(productUrl)) {
      return;
    }

    prefetchQueue.add(productUrl);

    // Prefetch after a short delay to avoid excessive requests
    setTimeout(() => {
      if (prefetchQueue.has(productUrl)) {
        console.log('[ProductSwitcher] Prefetching:', productUrl);
        prefetchProductPage(productUrl);
      }
    }, 300);
  }

  // Prefetch function for hover optimization
  async function prefetchProductPage(productUrl) {
    try {
      if (pageCache.has(productUrl)) return;

      const response = await fetch(productUrl, {
        headers: {
          'Accept': 'text/html',
          'X-Requested-With': 'XMLHttpRequest'
        }
      });

      if (response.ok) {
        const html = await response.text();
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const mainSection = doc.querySelector('[id*="template--"][id*="__main"]');

        if (mainSection) {
          pageCache.set(productUrl, mainSection.cloneNode(true));
          console.log('[ProductSwitcher] Prefetched and cached:', productUrl);
        }
      }
    } catch (error) {
      console.warn('[ProductSwitcher] Prefetch failed:', error);
    } finally {
      prefetchQueue.delete(productUrl);
    }
  }

  // Optimized update with caching and better DOM handling
  async function updateWithOptimizedApproach(productUrl, target) {
    try {
      let newMainSection;

      // Check cache first
      if (pageCache.has(productUrl)) {
        console.log('[ProductSwitcher] Using cached content for:', productUrl);
        newMainSection = pageCache.get(productUrl).cloneNode(true);
      } else {
        console.log('[ProductSwitcher] Fetching and caching:', productUrl);

        const response = await fetch(productUrl, {
          headers: {
            'Accept': 'text/html',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const html = await response.text();
        const doc = new DOMParser().parseFromString(html, 'text/html');
        newMainSection = doc.querySelector('[id*="template--"][id*="__main"]');

        if (newMainSection) {
          // Cache for future use
          pageCache.set(productUrl, newMainSection.cloneNode(true));
        }
      }

      const currentMainSection = document.querySelector('[id*="template--"][id*="__main"]');

      if (newMainSection && currentMainSection) {
        console.log('[ProductSwitcher] Updating main product section');

        // Use more efficient DOM update with animation frame
        requestAnimationFrame(() => {
          currentMainSection.outerHTML = newMainSection.outerHTML;

          // Dispatch events for any JavaScript re-initialization
          document.dispatchEvent(new CustomEvent('theme:section:load'));
          document.dispatchEvent(new CustomEvent('product:switched', {
            detail: { productUrl, productHandle: target.dataset.productHandle }
          }));

          console.log('[ProductSwitcher] Optimized update completed successfully');
        });

        // Smooth scroll to top
        window.scrollTo({ top: 0, behavior: 'smooth' });

      } else {
        console.warn('[ProductSwitcher] Could not find main section, falling back to navigation');
        window.location.href = productUrl;
      }

    } catch (error) {
      console.error('[ProductSwitcher] Optimized update failed:', error);
      window.location.href = productUrl;
    } finally {
      target.classList.remove('loading');
    }
  }

  // Keep the original function for backward compatibility
  async function updateWithManualApproach(productUrl, target) {
    // Delegate to optimized approach
    return updateWithOptimizedApproach(productUrl, target);
  }

  async function updateSection(sectionId, url) {
    try {
      if (window.sectionRenderer?.renderSection) {
        // Use the project's section renderer
        await window.sectionRenderer.renderSection(sectionId, { url, cache: false });
      } else {
        // Manual fallback
        await manualUpdateSection(sectionId, url);
      }
    } catch (error) {
      console.error(`[ProductSwitcher] Section update failed for ${sectionId}:`, error);
      throw error;
    }
  }

  async function manualUpdateSection(sectionId, url) {
    const section = document.getElementById(sectionId);
    if (!section) {
      throw new Error(`Section ${sectionId} not found in DOM`);
    }

    // Extract section name from ID (remove shopify-section- prefix if present)
    const sectionName = sectionId.replace(/^shopify-section-/, '');

    const fetchUrl = new URL(url);
    fetchUrl.searchParams.set('section_id', sectionName);

    console.log('[ProductSwitcher] Fetching section:', fetchUrl.toString());

    const response = await fetch(fetchUrl.toString(), {
      headers: {
        'Accept': 'text/html',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const html = await response.text();
    const doc = new DOMParser().parseFromString(html, 'text/html');
    const newSection = doc.getElementById(sectionId);

    if (!newSection) {
      console.warn(`[ProductSwitcher] Section ${sectionId} not found in response, trying alternatives`);
      // Try to find any section in the response
      const anySection = doc.querySelector('.shopify-section');
      if (anySection) {
        anySection.id = sectionId;
        section.outerHTML = anySection.outerHTML;
      } else {
        throw new Error(`No section content found in response`);
      }
    } else {
      section.outerHTML = newSection.outerHTML;
    }

    // Trigger section load event
    document.dispatchEvent(new CustomEvent('theme:section:load'));
  }

  async function updateWithSectionRenderer(productUrl, target) {
    try {
      const url = new URL(productUrl, window.location.origin);

      // Find product sections to update - use actual section patterns
      const productSections = document.querySelectorAll(`
        [id*="template--"][id*="__main"],
        [id*="template--"][id*="__product"],
        [id*="shopify-section-template--"][id*="main"]
      `);

      console.log('[ProductSwitcher] Found sections to update:', productSections.length);

      // Also try to find any sections that might contain product info
      const allSections = document.querySelectorAll('.shopify-section[id*="template--"]');
      console.log('[ProductSwitcher] All template sections found:', allSections.length);

      // Filter to likely product-related sections, exclude header/footer
      const relevantSections = Array.from(allSections).filter(section => {
        const id = section.id.toLowerCase();
        // Include main product sections, exclude header/footer/announcements
        return (id.includes('main') ||
               id.includes('product') ||
               id.includes('media') ||
               id.includes('gallery')) &&
               !id.includes('header') &&
               !id.includes('footer') &&
               !id.includes('announcement');
      });

      console.log('[ProductSwitcher] Relevant sections:', relevantSections.map(s => s.id));

      // Update sections in parallel
      const updatePromises = relevantSections.map(section => {
        if (section.id) {
          console.log('[ProductSwitcher] Updating section:', section.id);
          return updateSection(section.id, url).catch(error => {
            console.warn(`[ProductSwitcher] Failed to update ${section.id}:`, error);
            return null; // Don't fail the whole operation
          });
        }
      }).filter(Boolean);

      await Promise.allSettled(updatePromises);

      // Dispatch custom event
      document.dispatchEvent(new CustomEvent('product:switched', {
        detail: { productUrl, productHandle: target.dataset.productHandle }
      }));

      // Scroll to top
      window.scrollTo({ top: 0, behavior: 'smooth' });

    } catch (error) {
      console.error('[ProductSwitcher] Update failed:', error);
      window.location.href = productUrl;
    } finally {
      target.classList.remove('loading');
    }
  }

  // Add styles
  function addProductSwitcherStyles() {
    if (document.getElementById('product-switcher-styles')) return;

    const style = document.createElement('style');
    style.id = 'product-switcher-styles';
    style.textContent = `
      .product-switch-link {
        transition: opacity 0.2s ease;
      }
      .product-switch-link:hover {
        opacity: 0.8;
      }
      .product-switch-link.loading {
        opacity: 0.5;
        pointer-events: none;
      }
    `;
    document.head.appendChild(style);
  }

  // Cache management
  function clearPageCache() {
    pageCache.clear();
    prefetchQueue.clear();
    console.log('[ProductSwitcher] Cache cleared');
  }

  // Limit cache size to prevent memory issues
  function manageCacheSize() {
    const MAX_CACHE_SIZE = 10;
    if (pageCache.size > MAX_CACHE_SIZE) {
      const firstKey = pageCache.keys().next().value;
      pageCache.delete(firstKey);
    }
  }

  // Initialize
  function initProductSwitcher() {
    console.log('[ProductSwitcher] Initializing optimized version...');

    // Remove any existing listeners
    document.removeEventListener('click', handleProductSwitchClick);
    document.removeEventListener('mouseover', handleProductHover);

    // Add new listeners
    document.addEventListener('click', handleProductSwitchClick);
    document.addEventListener('mouseover', handleProductHover);

    // Add styles
    addProductSwitcherStyles();

    // Clear cache on page visibility change (user switches tabs)
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        manageCacheSize();
      }
    });

    console.log('[ProductSwitcher] Optimized version initialized successfully');
  }

  // Start immediately if DOM is ready, otherwise wait
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProductSwitcher);
  } else {
    initProductSwitcher();
  }
{% endjavascript %}
