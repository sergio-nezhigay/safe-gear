<style>
  .table-container {
    width: 100%;
    margin: auto;
    border-radius: 5px;
    overflow: hidden;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }
  thead {
    background-color: #cbe3ff;
    color: #000;
    text-align: left;
  }
  th,
  td {
    padding: 12px;
    border: 1px solid #ddd;
  }
  td a {
    text-decoration: none;
    color: #000;
  }
  td .product_title_ {
    color: #4b81bf;
    text-decoration: none;
    font-size: 16px;
    line-height: 20px;
  }

  .price {
    color: #3cc561;
  }
  .info-btn {
    color: white;
    padding: 10px 15px;
    text-align: center;
    display: inline-block;
    text-decoration: none;
    font-weight: bold;
    border: none;
    cursor: pointer;
  }
  .custom-size_chart {
    padding-top: 33px;
  }
  .table-container table tr td:first-child {
    padding-left: 5px;
  }
  .custom-product-container .table-container table tr th {
    font-size: 16px;
    font-weight: 300;
    padding-top: 10px;
    padding-bottom: 10px;
  }
  @media (max-width: 768px) {
    .custom-product-container .table-container {
      width: 100%;
      overflow-x: auto;
      position: relative;
    }

    .custom-product-container table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      min-width: 600px;
    }

    .custom-product-container table th:first-child,
    .custom-product-container table td:first-child {
      position: sticky;
      left: 0;
      {% comment %}z-index: 10;{% endcomment %}
      border-right: 2px solid #ddd;
      min-width: 120px;
      max-width: 120px;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }

    .custom-product-container table td:first-child {
      background-color: #fff;
    }

    .custom-product-container table th:first-child {
      background-color: #cbe3ff;
      font-size: 14px;
      font-weight: 300;
      text-align: left;
      padding: 12px 8px;
      height: 100%;
      vertical-align: top;
    }

    .custom-product-container table th,
    .custom-product-container table td {
      min-width: 100px;
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
      font-size: 14px;
    }

    .custom-product-container table th {
      font-size: 14px;
      font-weight: 300;
      text-align: center;
      background-color: #cbe3ff;
    }

    .custom-product-container table td:first-child a,
    .custom-product-container table th:first-child {
      display: block;
      word-break: break-word;
      line-height: 1.2;
    }
    .cust_model {
      height: 125px !important;
    }
  }
</style>
{% if product.metafields.custom.list_product != blank %}
  <div class="section-background color-{{ section.settings.color_scheme }}"></div>
  <div
    class="size-chart-section section section--page-width spacing-style color-{{ section.settings.color_scheme | default: 'scheme-1' }} relative"
    style="{% render 'spacing-style', settings: section.settings %}"
  >
    <div class="page-width">
      <div id="custom-product-{{ section.id }}" class="custom-size_chart">
        <h2 class="table-heading_ title title-wrapper--no-top-margin inline-richtext h1 scroll-trigger animate--slide-in">
          Størrelser
        </h2>
        <div class="custom-product-wrap">
          <div class="custom-product-container">
            <div class="table-container">
              <table>
                <thead>
                  <tr>
                    <th class="cust_model">Model</th>
                    <th class="cust_hkd">
                      Udvendige mål <br>
                      (HxBxD mm)
                    </th>
                    <th class="cust_hkd">
                      Indvendige mål <br>
                      (HxBxD mm)
                    </th>
                    <th class="cust_ve">Vægt</th>
                    <th class="cust_price">Pris</th>
                    <th class="cust_hkd"></th>
                  </tr>
                </thead>
                <tbody>
                  {% for product_ in product.metafields.custom.list_product.value %}
                    <tr>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product_title_ product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.title -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.metafields.custom.new_height.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_width.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_depth.value | split: ' ' | first -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {{- product_.metafields.custom.new_height_interior.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_width_interior.value | split: ' ' | first }} X
                          {{ product_.metafields.custom.new_depth_interior.value | split: ' ' | first -}}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                        >
                          {% for variant in product_.variants %}
                            {% if forloop.first %}
                              <span>{{ variant.weight | divided_by: 1000 }} kg</span>
                            {% endif %}
                          {% endfor %}
                        </a>
                      </td>
                      <td class="cut_td">
                        <a
                          href="{{ product_.url }}"
                          class="product-switch-link"
                          data-product-url="{{ product_.url }}"
                          data-product-handle="{{ product_.handle }}"
                          >From <span class="price">{{ product_.price | money_with_currency }}</span></a
                        >
                      </td>
                      <td class="cut_td">
                        <a
                          href="javascript:void(0);"
                          id="{{ product_.url }}"
                          pr_handle="{{ product_.handle }}"
                          class="info-btn"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="30"
                            height="30"
                            viewBox="0 0 30 30"
                            fill="none"
                          >
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M19.5163 20.5769C17.6058 22.2418 15.1081 23.25 12.375 23.25C6.3689 23.25 1.5 18.3811 1.5 12.375C1.5 6.3689 6.3689 1.5 12.375 1.5C18.3811 1.5 23.25 6.3689 23.25 12.375C23.25 15.1081 22.2418 17.6058 20.5769 19.5163L29.7803 28.7197L28.7197 29.7803L19.5163 20.5769ZM21.75 12.375C21.75 17.5527 17.5527 21.75 12.375 21.75C7.19733 21.75 3 17.5527 3 12.375C3 7.19733 7.19733 3 12.375 3C17.5527 3 21.75 7.19733 21.75 12.375Z" fill="#3CC561"/>
                          </svg>
                        </a>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

{% schema %}
{
  "name": "Size chart",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 48
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 48
    }
  ],
  "presets": [
    {
      "name": "Size chart"
    }
  ]
}
{% endschema %}

{% javascript %}
  class ProductSwitcher {
    constructor() {
      document.addEventListener('click', this.handleProductSwitch.bind(this));
      this.addStyles();
    }

    addStyles() {
      var style = document.createElement('style');
      style.textContent =
        '.product-switch-link { transition: opacity 0.2s ease; } .product-switch-link:hover { opacity: 0.8; } .product-switch-link.loading { opacity: 0.5; pointer-events: none; }';
      document.head.appendChild(style);
    }

    async handleProductSwitch(event) {
      if (!event.target.classList.contains('product-switch-link')) return;

      event.preventDefault();
      event.target.classList.add('loading');

      var productUrl = event.target.dataset.productUrl;
      var productHandle = event.target.dataset.productHandle;

      if (!productUrl) {
        event.target.classList.remove('loading');
        return;
      }

      try {
        window.history.pushState({}, '', productUrl);
        await this.updateProductSections(productUrl);
        await this.updateProductImages(productUrl);

        document.dispatchEvent(
          new CustomEvent('product:switched', {
            detail: { productUrl, productHandle },
          })
        );

        window.scrollTo({ top: 0, behavior: 'smooth' });
        event.target.classList.remove('loading');
      } catch (error) {
        event.target.classList.remove('loading');
        window.location.href = productUrl;
      }
    }

    async updateProductSections(productUrl) {
      var sectionsToUpdate = this.findProductSections();
      if (sectionsToUpdate.length === 0) throw new Error('No sections to update');

      var url = new URL(productUrl, window.location.origin);

      for (var sectionId of sectionsToUpdate) {
        try {
          if (window.sectionRenderer?.renderSection) {
            await window.sectionRenderer.renderSection(sectionId, { url, cache: false });
          } else {
            await this.manualUpdateSection(sectionId, url);
          }
        } catch (error) {}
      }
    }

    findProductSections() {
      var sections = [];
      var selectors = [
        '[id*="product-information"]',
        '[id*="product-details"]',
        '[id*="product-media"]',
        '[id*="product-gallery"]',
        '[id*="product-images"]',
        '[id*="shopify-section-product"]',
        '[id*="ProductMedia"]',
        '[id*="ProductGallery"]',
        '[id*="ProductImages"]',
        '.product-information',
        '.product-details',
        '.product-media',
        '.product-gallery',
        '.product-images',
      ];

      selectors.forEach((selector) => {
        try {
          document.querySelectorAll(selector).forEach((element) => {
            if (element.id && !sections.includes(element.id)) {
              sections.push(element.id);
            }
          });
        } catch (e) {}
      });

      document.querySelectorAll('[class*="product"], [id*="product"]').forEach((el) => {
        if (el.id && el.tagName === 'SECTION' && !sections.includes(el.id)) {
          sections.push(el.id);
        }
      });

      return sections;
    }

    async updateProductImages(productUrl) {
      try {
        var response = await fetch(productUrl, {
          headers: { Accept: 'text/html', 'X-Requested-With': 'XMLHttpRequest' },
        });
        if (!response.ok) return;

        var html = await response.text();
        var doc = new DOMParser().parseFromString(html, 'text/html');

        var currentImages = document.querySelectorAll(
          'img[src*="product"], img[src*="files"], .product-media img, .product-gallery img, [class*="product"] img'
        );
        var newImages = doc.querySelectorAll(
          'img[src*="product"], img[src*="files"], .product-media img, .product-gallery img, [class*="product"] img'
        );

        for (var i = 0; i < Math.min(currentImages.length, newImages.length); i++) {
          var currentImg = currentImages[i];
          var newImg = newImages[i];

          if (currentImg.src !== newImg.src) {
            currentImg.src = newImg.src;
            if (newImg.srcset) currentImg.srcset = newImg.srcset;
            if (newImg.alt) currentImg.alt = newImg.alt;
          }
        }

        var currentPictures = document.querySelectorAll('picture');
        var newPictures = doc.querySelectorAll('picture');

        for (var j = 0; j < Math.min(currentPictures.length, newPictures.length); j++) {
          if (currentPictures[j].outerHTML !== newPictures[j].outerHTML) {
            currentPictures[j].outerHTML = newPictures[j].outerHTML;
          }
        }
      } catch (error) {}
    }

    async manualUpdateSection(sectionId, url) {
      var section = document.getElementById(sectionId);
      if (!section) throw new Error('Section not found: ' + sectionId);

      var sectionName = sectionId.includes('template--') ? sectionId.split('-').slice(1).join('-') : sectionId;

      var fetchUrl = new URL(url);
      fetchUrl.searchParams.append('section_id', sectionName);

      var response = await fetch(fetchUrl.toString(), {
        headers: { Accept: 'text/html', 'X-Requested-With': 'XMLHttpRequest' },
      });

      if (!response.ok) throw new Error('HTTP ' + response.status + ': ' + response.statusText);

      var html = await response.text();
      var doc = new DOMParser().parseFromString(html, 'text/html');
      var newSection = doc.getElementById(sectionId);

      if (!newSection) {
        var alternatives = [
          doc.querySelector('[class*="product-information"]'),
          doc.querySelector('[class*="product-details"]'),
          doc.querySelector('section'),
          doc.querySelector('div'),
        ];

        newSection = alternatives.find((el) => el);
        if (newSection) newSection.id = sectionId;
      }

      if (!newSection) throw new Error('New section not found in response');

      section.outerHTML = newSection.outerHTML;
      document.dispatchEvent(new CustomEvent('theme:section:load'));

      if (window.theme?.init) window.theme.init();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ProductSwitcher());
  } else {
    new ProductSwitcher();
  }
{% endjavascript %}
