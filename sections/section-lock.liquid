<style>
.main_img-lock{
  width: 300px;
}
.lock-content-main{
  max-width: 840px;
  margin: 0 auto;
  align-items: center;
  justify-content: center;
  gap: 40px;
}
.title-main-lock{
  color: black;
  font-size: 33px;
  margin-bottom: 15px;
}
.main-lock-depth{
  padding-top: 10px;
}
@media(max-width: 1000px){
  .lock-content-main{
    padding: 0 20px;
    flex-direction: column;
  }
  .main_img-lock {
    width: 190px;
  }
}
</style>
<section data-handle="{{ product.handle }}"></section>

<script id="variants-data" type="application/json">
{
  "SafeDepth": {{ product.metafields.custom.safe_depth | json }},
  {% for v in product.variants %}
    {% if v.metafields.custom.lock_product.value.title %}
      "{{ v.id }}": {
        "title": "{{ v.metafields.custom.lock_product.value.title | escape }}",
        "description": "{{ v.metafields.custom.lock_product.value.description_lock | metafield_tag | escape }}",
        "image": "{{ v.metafields.custom.lock_product.value.image | image_url }}",
        "locks": "{{ v.metafields.custom.lock_product.value.lock_depth  }}"
      }{% if forloop.last == false %},{% endif %} 
    {% endif %}
  {% endfor %}
}
</script>


<script>
document.addEventListener("DOMContentLoaded", () => {

  const container = document.querySelector("section[data-handle]");
  if (!container) return;


  const variantsData = JSON.parse(document.getElementById("variants-data").textContent);


  const renderVariant = (variantId) => {
    container.innerHTML = ""; 

    const data = variantsData[variantId];
    if (!data) return;

    const div = document.createElement("div");
    div.className = "lock-title lock-content-main";
    div.style.display = "flex";
    div.dataset.id = variantId;
    const decodeHTML = (str) => {
      const txt = document.createElement("textarea");
      txt.innerHTML = str;
      return txt.value;
    };
    
    const descriptionHTML = decodeHTML(data.description);
  
    const safeDepth = variantsData.SafeDepth;

    const baseDepth = parseFloat(safeDepth);  
    const lockDepth = parseFloat(data.locks);
    const totalDepth = baseDepth + lockDepth;  

    div.innerHTML = `
      <img src="${data.image}" class="main_img-lock" />
      <div>
        <p class="title-main-lock">${data.title}</p>
        <div>${descriptionHTML || ""}</div>
        <div class='main-lock-depth'>Lock depth- ${totalDepth} mm</div>
      </div>
    `;
    container.appendChild(div);
  };


  const updateFromUrl = () => {
    const url = new URL(location.href);
    const variantId = url.searchParams.get("variant") || Object.keys(variantsData)[0];
    renderVariant(variantId);
  };

  updateFromUrl();

  ["pushState", "replaceState"].forEach(method => {
    const orig = history[method];
    history[method] = function(...args) {
      orig.apply(this, args);
      updateFromUrl();
    };
  });

  window.addEventListener("popstate", updateFromUrl);
});
</script>

{% schema %}
{
  "name": "Section lock",
  "settings": [],
  "presets": [
    {
        "name": "Section lock"
    }
  ]
}
{% endschema %}